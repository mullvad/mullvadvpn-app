### Android properties ###
android.enableR8.fullMode=true
android.nonTransitiveRClass=false
android.useAndroidX=true


### Kotlin properties ###
kotlin.code.style=official


### Gradle properties ###
org.gradle.caching=true
org.gradle.jvmargs=-Xmx8192M -Dkotlin.daemon.jvm.options\="-Xmx8192M"


### Mullvad properties ###

# Show in app version notifications
app.config.inAppVersionNotifications.enable=true

# Optional property to override the version name and code
# app.config.override.versionName=
# app.config.override.versionCode=

# Targets to build the daemon for
app.build.cargo.targets=arm,arm64,x86,x86_64

# Perform a clean the cargo before each build
app.build.cargo.cleanBuild=true

# Keep debug symbols in debug builds, this will cause the debug artifacts
# to be substantially larger.
app.build.keepDebugSymbols=false

## E2E tests ##

# To run e2e tests you need to provide credentails for the enviroment you
# are targeting. Either provide a partnerAuth that will automatically create
# accounts as needed or provide already valid credentaisl

#test.e2e.prod.partnerAuth=
# OR
#test.e2e.stagemole.accountNumber.valid=
#test.e2e.stagemole.accountNumber.invalid=1234123412341234

#test.e2e.stagemole.partnerAuth=
# OR
#test.e2e.prod.accountNumber.valid=
#test.e2e.prod.accountNumber.invalid=1234123412341234


# Run the highly rate limited tests, these will make the test run go for longer
# since it will have to be careful not to trigger the rate limiting.
test.e2e.config.runHighlyRateLimitedTests=false

# Whether to enable tests dependent on RAAS (Router As A Service), if enabled
# you need to provide the rest of the `test.e2e.config.raas.*` properties.
test.e2e.config.raas.enable=false
#
# IP to the machine running RAAS
#test.e2e.config.raas.host=
#
# IP address or host to send traffic to
#test.e2e.config.raas.trafficGenerator.target.host=
#
# Port 1-65532
#test.e2e.config.raas.trafficGenerator.target.port=
