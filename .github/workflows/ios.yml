---
name: iOS app
on:
  pull_request:
    paths:
      - .github/workflows/ios.yml
      - ios/build-rust-library.sh
      - ios/.swiftformat
      - ios/wireguard-apple
      - ios/**/*.swift
      - ios/**/*.xctestplan
  workflow_dispatch:

permissions: {}

jobs:
  check-formatting:
    name: Check formatting
    runs-on: macos-15
    steps:
      - name: Install SwiftFormat
        run: |
          brew update
          brew upgrade swiftformat

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check formatting
        run: |
          swiftformat --version
          swiftformat --lint .
        working-directory: ios

  swiftlint:
    name: Run swiftlint
    runs-on: macos-15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run swiftlint
        run: |
          brew install swiftlint
          swiftlint --version
          swiftlint --reporter github-actions-logging
        working-directory: ios

  ui-test-build:
    name: Build for ui tests (staging)
    runs-on: macos-15
    env:
      SOURCE_PACKAGES_PATH: .spm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup project
        uses: ./.github/actions/ios/setup-project-toolchain
      - name: Select latest available iPhone simulator
        id: sim
        run: |
          # Extract all iOS runtimes, sort, and pick the latest
          OS_VERSION=$(xcrun simctl list runtimes | awk -F'[()]' '/iOS/{print $2}' | sort -V | tail -n1)

          # Pick the first iPhone in that runtime
          LINE=$(xcrun simctl list devices "iOS $OS_VERSION" | grep "iPhone" | head -n1)

          if [ -z "$LINE" ]; then
            echo "❌ No iPhone simulator found for iOS $OS_VERSION"
            exit 1
          fi

          UDID=$(echo "$LINE" | awk -F '[()]' '{print $2}')
          NAME=$(echo "$LINE" | sed -n 's/^\s*\([^()]*\) (.*/\1/p' | xargs)

          echo "Picked device: $NAME (iOS $OS_VERSION) [$UDID]"
          echo "udid=$UDID" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "os_version=$OS_VERSION" >> $GITHUB_OUTPUT

      - name: Boot simulator
        run: |
          xcrun simctl boot "${{ steps.sim.outputs.udid }}"
          xcrun simctl bootstatus "${{ steps.sim.outputs.udid }}" -b
      - name: Build for ui tests
        run: |
          set -o pipefail && env NSUnbufferedIO=YES xcodebuild \
          -project MullvadVPN.xcodeproj \
          -scheme MullvadVPNUITests \
          -testPlan MullvadVPNUITestsAll \
          -clonedSourcePackagesDirPath "$SOURCE_PACKAGES_PATH" \
          -disableAutomaticPackageResolution \
          -destination "platform=iOS Simulator,name=${{ steps.sim.outputs.name }},\
          OS=${{ steps.sim.outputs.os_version }}" \
          clean build-for-testing 2>&1 | xcbeautify
        working-directory: ios/

  test:
    name: Unit tests
    runs-on: macos-15-xlarge
    env:
      SOURCE_PACKAGES_PATH: .spm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/ios/setup-project-toolchain
      - name: Select latest available iPhone simulator
        id: sim
        run: |
          # Extract all iOS runtimes, sort, and pick the latest
          OS_VERSION=$(xcrun simctl list runtimes | awk -F'[()]' '/iOS/{print $2}' | sort -V | tail -n1)

          # Pick the first iPhone in that runtime
          LINE=$(xcrun simctl list devices "iOS $OS_VERSION" | grep "iPhone" | head -n1)

          if [ -z "$LINE" ]; then
            echo "❌ No iPhone simulator found for iOS $OS_VERSION"
            exit 1
          fi

          UDID=$(echo "$LINE" | awk -F '[()]' '{print $2}')
          NAME=$(echo "$LINE" | sed -n 's/^\s*\([^()]*\) (.*/\1/p' | xargs)

          echo "Picked device: $NAME (iOS $OS_VERSION) [$UDID]"
          echo "udid=$UDID" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "os_version=$OS_VERSION" >> $GITHUB_OUTPUT

      - name: Boot simulator
        run: |
          xcrun simctl boot "${{ steps.sim.outputs.udid }}"
          xcrun simctl bootstatus "${{ steps.sim.outputs.udid }}" -b

      - name: Run unit tests
        run: |
          set -o pipefail && env NSUnbufferedIO=YES xcodebuild \
          -project MullvadVPN.xcodeproj \
          -scheme MullvadVPN \
          -testPlan MullvadVPNCI \
          -destination "platform=iOS Simulator,name=${{ steps.sim.outputs.name }},\
          OS=${{ steps.sim.outputs.os_version }}" \
          -clonedSourcePackagesDirPath "$SOURCE_PACKAGES_PATH" \
          -disableAutomaticPackageResolution \
          -resultBundlePath xcode-test-report \
          test 2>&1 | xcbeautify
        working-directory: ios/

      - name: Archive test report
        if: always()
        run: zip -r test-report.zip ios/xcode-test-report.xcresult

      - name: Store test report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.zip
